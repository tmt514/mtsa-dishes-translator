#!/usr/bin/env python3

import sys
import os


def helper():
    print("""[Usage]: ./run COMMAND

    COMMAND:
        db_reset  : 可以重置 db (注意！資料會被刪除！)
        db_migrate: 把指定資料 dump 出來、db 重置、再把資料 migrate 上去
        celery    : 啟動 celery workers
        test      : 自動執行 AppTestCase 裡頭的 test
        backup    : 把指定資料 dump 出來成文字檔
    """)


def db_reset():
    """ 重置 db """
    import os
    try:
        os.remove("app/aafood.db")
    except Exception as e:
        pass
    from app.models import db
    db.create_all()
    print("Reset Database Done!")



def db_backup():
    """ 資料庫備份: 備份到 app/data/db_dump """

    # TODO: 其他資料表呢????

    from app.models import db, Term, Photo, Location, User, Joke, Category, Termcategories, Description
    import json
    dumpfile = open('app/data/db_dump', 'w')
    DB_TABLES = [Term, Photo, Location, User, Joke, Category, Termcategories, Description]

    counter_all = 0
    for Table in DB_TABLES:
        counter_one = 0
        print("備份 %-16s..." % Table.__name__, end="")
        for row in Table.query.all():
            d = row.as_dict()
            d['__db'] = Table.__name__
            dumpfile.write(json.dumps(d) + "\n")
            counter_one += 1
        counter_all += counter_one
        print(" %6d 筆資料完成! 目前累計總數 %6d 筆。" % (counter_one, counter_all))

    print("Done: 總共 %6d 筆資料完成!" % (counter_all))
    dumpfile.close()
    db.session.close()


def db_load(filename='app/data/db_dump'):
    """ 資料庫載入: 從指定檔案載入資料 """
    
    # TODO: 其他資料表呢????

    from app.models import db, Term, Photo, Location, User, Joke, Category, Termcategories, Description
    import json
    dumpfile = open(filename, 'r')
    DB_TABLES = [Term, Photo, Location, User, Joke, Category, Termcategories, Description]
    DB_TABLES_DICT = dict(map(lambda Table: (Table.__name__, Table), DB_TABLES))
    # 載入資料
    print("載入資料中...")
    counter = 0
    counter_inserted = 0
    for line in dumpfile:
        d = json.loads(line)
        Table = DB_TABLES_DICT.get(d['__db'], None)
        if Table is not None:
            if not Table.query.get(d['id']):
                del(d['__db'])
                row = Table(**d)
                db.session.add(row)
                counter_inserted += 1
        counter += 1
    db.session.commit()
    print(" 共 %d 筆資料完成! (新增了 %d 筆資料)" % (counter, counter_inserted))


def db_migrate():
    db_backup()
    db_reset()
    db_load()


def app_data_import():
    import app.data
    app.data.add_data()

def run_tests():
    """ 執行指定測試 """
    if len(sys.argv) >= 3:
        os.system("green -vv " + sys.argv[2])
    else:
        os.system("green -vv app")
    #import app.tests.test_app as test_app
    #import unittest
    #suite = unittest.TestLoader().loadTestsFromTestCase(test_app.AppTestCase)
    #unittest.TextTestRunner(verbosity=2).run(suite)
    

package_list = [
        "flask", "flask_sqlalchemy",
        "pyenchant", "jieba",
        "flask_redis", "flask_celery"
    ]
def install():
    for pkg in package_list:
        os.system("pip3 install " + pkg)
    if os.path.exists("app/aafood.db") == False:
        db_reset()




if len(sys.argv) < 2:
    helper()
    sys.exit(0)

if sys.argv[1] == 'db_reset':
    db_reset()
    sys.exit(0)

if sys.argv[1] == 'db_migrate':
    db_migrate()
    sys.exit(0)

# 執行 Celery Instance
if sys.argv[1] == 'celery':
    app_data_import()
    print("app data import successfully")
    os.system("celery -A app.celery worker")
    sys.exit(0)

# 執行 Test
if sys.argv[1] == 'test' or sys.argv[1] == 'tests':
    run_tests()
    sys.exit(0)

# 執行資料庫備份
if sys.argv[1] == 'backup' or sys.argv[1] == 'db_backup':
    db_backup()
    sys.exit(0)

if sys.argv[1] == 'db_load':
    db_load()
    sys.exit(0)

if sys.argv[1] == 'install':
    install()
    sys.exit(0)


helper()
sys.exit(0)
